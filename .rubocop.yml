require:
  - rubocop-rails
  - rubocop-performance
  - rubocop-rspec

AllCops:
  TargetRubyVersion: 2.7
  # RuboCop has a bunch of cops enabled by default. This setting tells RuboCop
  # to ignore them, so only the ones explicitly set in this file are enabled.
  DisabledByDefault: true
  Exclude:
    - Rakefile
    - db/**/
    - db/schema.rb
    - db/migrate/**
    - bin/**/
    - config/**/
    - config/initializers/**/
    - config/environments/**/
    - vendor/**/*
    - spec/rails_helper.rb
    - config.ru
    - node_modules/**/*

#################### Bundler ###############################

Bundler/DuplicatedGem:
  Description: "Checks for duplicate gem entries in Gemfile."
  Enabled: true
  Severity: warning
  VersionAdded: "0.46"
  VersionChanged: "1.40"
  Include:
    - "**/*.gemfile"
    - "**/Gemfile"
    - "**/gems.rb"

Bundler/OrderedGems:
  Description: >-
    Gems within groups in the Gemfile should be alphabetically sorted.
  Enabled: true
  VersionAdded: "0.46"
  VersionChanged: "0.47"
  TreatCommentsAsGroupSeparators: true
  ConsiderPunctuation: false
  Include:
    - "**/*.gemfile"
    - "**/Gemfile"
    - "**/gems.rb"

#################### Layout ###########################

# Align `when` with `case`.
Layout/CaseIndentation:
  Description: "Indentation of when in a case/(when|in)/[else/]end."
  Enabled: true

# Align comments with method definitions.
Layout/CommentIndentation:
  Description: "Indentation of comments."
  Enabled: true

Layout/DefEndAlignment:
  Description: "Align ends corresponding to defs correctly."
  Enabled: true

Layout/DotPosition:
  Description: "Checks the position of the dot in multi-line method calls."
  Enabled: true

Layout/ElseAlignment:
  Description: "Align elses and elsifs correctly."
  Enabled: true

Layout/EmptyLineAfterGuardClause:
  Description: "Add empty line after guard clause."
  Enabled: true

# No extra empty lines.
Layout/EmptyLines:
  Description: "Don't use several empty lines in a row."
  Enabled: true

Layout/HashAlignment:
  Description: >-
    Align the elements of a hash literal if they span more than
    one line.
  Enabled: true

Layout/LeadingCommentSpace:
  Description: "Comments should start with a space."
  Enabled: true

# In a regular class definition, no empty lines around the body.
Layout/EmptyLinesAroundClassBody:
  Enabled: true

# In a regular method definition, no empty lines around the body.
Layout/EmptyLinesAroundMethodBody:
  Enabled: true

# In a regular module definition, no empty lines around the body.
Layout/EmptyLinesAroundModuleBody:
  Enabled: true

# Method definitions after `private` or `protected` isolated calls need one
# extra level of indentation.
Layout/IndentationConsistency:
  Enabled: true
  EnforcedStyle: indented_internal_methods

# Two spaces, no tabs (for indentation).
Layout/IndentationWidth:
  Enabled: true

Layout/SpaceBeforeSemicolon:
  Description: "No spaces before semicolons."
  Enabled: true

Layout/SpaceAfterColon:
  Enabled: true

Layout/SpaceAfterComma:
  Enabled: true

Layout/SpaceAroundEqualsInParameterDefault:
  Enabled: true

Layout/SpaceAroundKeyword:
  Enabled: true

Layout/SpaceAroundOperators:
  Enabled: true

Layout/SpaceBeforeFirstArg:
  Enabled: true

# Use `foo {}` not `foo{}`.
Layout/SpaceBeforeBlockBraces:
  Enabled: true

# Use `foo { bar }` not `foo {bar}`.
Layout/SpaceInsideBlockBraces:
  Enabled: true

# Use `{ a: 1 }` not `{a:1}`.
Layout/SpaceInsideHashLiteralBraces:
  Enabled: true

Layout/SpaceInsideParens:
  Enabled: true

# Detect hard tabs, no hard tabs.
Layout/IndentationStyle:
  Enabled: true

# Blank lines should not have any spaces.
Layout/TrailingEmptyLines:
  Enabled: true

# No trailing whitespace.
Layout/TrailingWhitespace:
  Enabled: true

# Align `end` with the matching keyword or starting expression except for
# assignments, where it should be aligned with the LHS.
Layout/EndAlignment:
  Enabled: true
  EnforcedStyleAlignWith: variable

#################### Style ###########################

# Prefer &&/|| over and/or.
Style/AndOr:
  Enabled: true

# Use Ruby >= 1.9 syntax for hashes. Prefer { a: :b } over { :a => :b }.
Style/HashSyntax:
  Enabled: true

# Defining a method with parameters needs parentheses.
Style/MethodDefParentheses:
  Enabled: true

# Checks for %q/%Q when single quotes or double quotes would do.
Style/RedundantPercentQ:
  Enabled: true

# Check quotes usage according to lint rule below.
Style/StringLiterals:
  Enabled: true
  EnforcedStyle: double_quotes

Style/FormatStringToken:
  Enabled: false

Style/CommentedKeyword:
  Description: "Do not place comments on the same line as certain keywords."
  Enabled: true

Style/CommentAnnotation:
  Description: >-
    Checks formatting of special comments
    (TODO, FIXME, OPTIMIZE, HACK, REVIEW, NOTE).
  StyleGuide: "#annotate-keywords"
  Enabled: true
  VersionAdded: "0.10"
  VersionChanged: "1.20"
  Keywords:
    - TODO
    - FIXME
    - OPTIMIZE
    - HACK
    - REVIEW
    - NOTE
  RequireColon: true

Style/GuardClause:
  Description: "Check for conditionals that can be replaced with guard clauses."
  Enabled: true

Style/Lambda:
  Description: "Use the new lambda literal syntax for single-line blocks."
  StyleGuide: "#lambda-multi-line"
  Enabled: true

Style/Next:
  Description: "Use `next` to skip iteration instead of a condition at the end."
  StyleGuide: "#no-nested-conditionals"
  Enabled: true
  VersionAdded: "0.22"
  VersionChanged: "0.35"
  # With `always` all conditions at the end of an iteration needs to be
  # replaced by next - with `skip_modifier_ifs` the modifier if like this one
  # are ignored: [1, 2].each { |a| return 'yes' if a == 1 }
  EnforcedStyle: skip_modifier_ifs
  # `MinBodyLength` defines the number of lines of the a body of an `if` or `unless`
  # needs to have to trigger this cop
  MinBodyLength: 3
  SupportedStyles:
    - skip_modifier_ifs
    - always

Style/NilComparison:
  Description: "Prefer x.nil? to x == nil."
  StyleGuide: "#predicate-methods"
  Enabled: true
  VersionAdded: "0.12"
  VersionChanged: "0.59"
  EnforcedStyle: predicate
  SupportedStyles:
    - predicate
    - comparison

Style/PercentLiteralDelimiters:
  Description: "Use `%`-literal delimiters consistently."
  Enabled: true
  PreferredDelimiters:
    default: ()
    "%i": "[]"
    "%I": "[]"
    "%r": "{}"
    "%w": "[]"
    "%W": "[]"

Style/PercentQLiterals:
  Enabled: true
  EnforcedStyle: lower_case_q

Style/Proc:
  Description: "Use proc instead of Proc.new."
  Enabled: true

Style/QuotedSymbols:
  Description: "Use a consistent style for quoted symbols."
  Enabled: pending
  EnforcedStyle: same_as_string_literals

Style/RedundantReturn:
  Description: "Don't use return where it's not required."
  Enabled: true

Style/RedundantSelf:
  Description: "Don't use self where it's not needed."
  Enabled: true

Style/SafeNavigation:
  Enabled: true

Style/StringConcatenation:
  Description: "Checks for places where string concatenation can be replaced with string interpolation."
  Enabled: true

Style/SymbolArray:
  Description: "Use %i or %I for arrays of symbols."
  Enabled: true

Style/TrailingCommaInArguments:
  Description: "Checks for trailing comma in argument lists."
  Enabled: true

Style/TrailingCommaInArrayLiteral:
  Description: "Checks for trailing comma in array literals."
  Enabled: true

Style/TrailingCommaInHashLiteral:
  Description: "Checks for trailing comma in hash literals."
  Enabled: true

Style/TrailingMethodEndStatement:
  Description: "Checks for trailing end statement on line of method body."
  Enabled: true

Style/EvenOdd:
  Description: "Favor the use of `Integer#even?` && `Integer#odd?`."
  Enabled: true

Style/FetchEnvVar:
  Description: >-
    Suggests `ENV.fetch` for the replacement of `ENV[]`.
  Reference:
    - https://rubystyle.guide/#hash-fetch-defaults
  Enabled: true
  # Environment variables to be excluded from the inspection.
  AllowedVars: []

Style/IfInsideElse:
  Description: "Finds if nodes inside else, which can be converted to elsif."
  Enabled: true

Style/IfUnlessModifier:
  Description: >-
    Favor modifier if/unless usage when you have a
    single-line body.
  StyleGuide: "#if-as-a-modifier"
  Enabled: true

Style/IfWithBooleanLiteralBranches:
  Enabled: true

Style/MultilineIfModifier:
  Description: "Only use if/unless modifiers on single line statements."
  Enabled: true

Style/NegatedIfElseCondition:
  Description: >-
    Checks for uses of `if-else` and ternary operators with a negated condition
    which can be simplified by inverting condition and swapping branches.
  Enabled: true

#################### Lint ###########################

# Use my_method(my_arg) not my_method( my_arg ) or my_method my_arg.
Lint/RequireParentheses:
  Enabled: true

Lint/DuplicateMethods:
  Description: "Check for duplicate method definitions."
  Enabled: true

Lint/InterpolationCheck:
  Description: "Checks for interpolation in a single quoted string."
  Enabled: true

Lint/SafeNavigationWithEmpty:
  Description: "Avoid `foo&.empty?` in conditionals."
  Enabled: true

Lint/SelfAssignment:
  Description: "Checks for self-assignments."
  Enabled: true

Lint/Syntax:
  Description: "Checks for syntax errors."
  Enabled: true

Lint/TrailingCommaInAttributeDeclaration:
  Description: "Checks for trailing commas in attribute declarations."
  Enabled: true

Lint/UnreachableCode:
  Description: "Unreachable code."
  Enabled: true

Lint/UnusedMethodArgument:
  Description: "Checks for unused method arguments."
  Enabled: true

#################### Naming ##############################

Naming/AccessorMethodName:
  Description: Check the naming of accessor methods for get_/set_.
  Enabled: true

Naming/ConstantName:
  Description: "Constants should use SCREAMING_SNAKE_CASE."
  Enabled: true
